{"version":3,"file":"static/js/440.b375a52d.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@waku+zerokit-rln-wasm@0.0.2/node_modules/@waku/zerokit-rln-wasm/rln_wasm.js","../../../src/resources/verification_key.js","../node_modules/.pnpm/@waku+rln@0.0.8/node_modules/@waku/rln/src/witness_calculator.js","../node_modules/.pnpm/@waku+rln@0.0.8/node_modules/@waku/rln/src/rln.ts"],"sourcesContent":["\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n/**\n*/\nexport function init_panic_hook() {\n    wasm.init_panic_hook();\n}\n\n/**\n* @param {number} tree_height\n* @param {Uint8Array} zkey\n* @param {Uint8Array} vk\n* @returns {number}\n*/\nexport function newRLN(tree_height, zkey, vk) {\n    const ret = wasm.newRLN(tree_height, addHeapObject(zkey), addHeapObject(vk));\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @param {Uint8Array} input\n* @returns {Uint8Array}\n*/\nexport function getSerializedRLNWitness(ctx, input) {\n    const ret = wasm.getSerializedRLNWitness(ctx, addHeapObject(input));\n    return takeObject(ret);\n}\n\n/**\n* @param {number} ctx\n* @param {Uint8Array} input\n*/\nexport function insertMember(ctx, input) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.insertMember(retptr, ctx, addHeapObject(input));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} ctx\n* @param {Uint8Array} serialized_witness\n* @returns {object}\n*/\nexport function RLNWitnessToJson(ctx, serialized_witness) {\n    const ret = wasm.RLNWitnessToJson(ctx, addHeapObject(serialized_witness));\n    return takeObject(ret);\n}\n\nlet cachedUint32Memory0 = new Uint32Array();\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4);\n    const mem = getUint32Memory0();\n    for (let i = 0; i < array.length; i++) {\n        mem[ptr / 4 + i] = addHeapObject(array[i]);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n/**\n* @param {number} ctx\n* @param {(bigint)[]} calculated_witness\n* @param {Uint8Array} serialized_witness\n* @returns {Uint8Array}\n*/\nexport function generate_rln_proof_with_witness(ctx, calculated_witness, serialized_witness) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayJsValueToWasm0(calculated_witness, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.generate_rln_proof_with_witness(retptr, ctx, ptr0, len0, addHeapObject(serialized_witness));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} ctx\n* @returns {Uint8Array}\n*/\nexport function generateMembershipKey(ctx) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.generateMembershipKey(retptr, ctx);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} ctx\n* @param {Uint8Array} proof\n* @returns {boolean}\n*/\nexport function verifyProof(ctx, proof) {\n    const ret = wasm.verifyProof(ctx, addHeapObject(proof));\n    return ret !== 0;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nexport class RLN {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rln_free(ptr);\n    }\n}\n/**\n* A struct representing an aborted instruction execution, with a message\n* indicating the cause.\n*/\nexport class WasmerRuntimeError {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmerruntimeerror_free(ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_BigInt_d0c7d465bfa30d3b = function(arg0) {\n        const ret = BigInt(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_BigInt_1fab4952b6c4a499 = function(arg0) {\n        const ret = BigInt(BigInt.asUintN(64, arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_set_c943d600fa71e4dd = function(arg0, arg1, arg2) {\n        getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        try {\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(arg0, arg1);\n        }\n    };\n    imports.wbg.__wbg_randomFillSync_065afffde01daa66 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_getRandomValues_b99eec4244a475bb = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_process_0cc2ada8524d6f83 = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_c11acceab27a6c87 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_7ff1ce49caf23815 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_cf6401cc1091279e = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_a746e79b322b9336 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_2036bed7c44c25e7 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_a21fc88caf1ecdc8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_1d9a920c6bfc44a8 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newnoargs_b5b063fc6c2f0376 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_268f7b7dd3430798 = function() {\n        const ret = new Map();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_97ae9d8645dc388b = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_0b9bfdd97583284e = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_6d479506f72c6a71 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_f2557cc78490aceb = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_7f206bda628d5286 = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_ba75c50d1cf384f4 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_set_a68214f35c417fa9 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_toString_d9cd5f001405e8ff = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).toString(arg1);\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_8d2af00bc1e329ee = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_933729cf5b66ac11 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fromEntries_7abdcb92016eb4b9 = function() { return handleError(function (arg0) {\n        const ret = Object.fromEntries(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_buffer_3f3d764d4747d564 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d9aa266703cb98be = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8c3f0052272a457a = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_83db9690f9353e79 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_f5933855e4f48a19 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_58ad4efbb5bcb886 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint32Memory0 = new Uint32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('rln_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\nexport { initSync }\nexport default init;\n",null,"// File generated with https://github.com/iden3/circom \n// following the instructions from:\n// https://github.com/vacp2p/zerokit/tree/master/rln#compiling-circuits\n\nexport async function builder(code, options) {\n\n    options = options || {};\n\n    let wasmModule;\n    try {\n\twasmModule = await WebAssembly.compile(code);\n    }  catch (err) {\n\tconsole.log(err);\n\tconsole.log(\"\\nTry to run circom --c in order to generate c++ code instead\\n\");\n\tthrow new Error(err);\n    }\n\n    let wc;\n\n    let errStr = \"\";\n    let msgStr = \"\";\n    \n    const instance = await WebAssembly.instantiate(wasmModule, {\n        runtime: {\n            exceptionHandler : function(code) {\n\t\tlet err;\n                if (code == 1) {\n                    err = \"Signal not found.\\n\";\n                } else if (code == 2) {\n                    err = \"Too many signals set.\\n\";\n                } else if (code == 3) {\n                    err = \"Signal already set.\\n\";\n\t\t} else if (code == 4) {\n                    err = \"Assert Failed.\\n\";\n\t\t} else if (code == 5) {\n                    err = \"Not enough memory.\\n\";\n\t\t} else if (code == 6) {\n                    err = \"Input signal array access exceeds the size.\\n\";\n\t\t} else {\n\t\t    err = \"Unknown error.\\n\";\n                }\n                throw new Error(err + errStr);\n            },\n\t    printErrorMessage : function() {\n\t\terrStr += getMessage() + \"\\n\";\n                // console.error(getMessage());\n\t    },\n\t    writeBufferMessage : function() {\n\t\t\tconst msg = getMessage();\n\t\t\t// Any calls to `log()` will always end with a `\\n`, so that's when we print and reset\n\t\t\tif (msg === \"\\n\") {\n\t\t\t\tconsole.log(msgStr);\n\t\t\t\tmsgStr = \"\";\n\t\t\t} else {\n\t\t\t\t// If we've buffered other content, put a space in between the items\n\t\t\t\tif (msgStr !== \"\") {\n\t\t\t\t\tmsgStr += \" \"\n\t\t\t\t}\n\t\t\t\t// Then append the message to the message we are creating\n\t\t\t\tmsgStr += msg;\n\t\t\t}\n\t    },\n\t    showSharedRWMemory : function() {\n\t\tprintSharedRWMemory ();\n            }\n\n        }\n    });\n\n    const sanityCheck =\n        options\n//        options &&\n//        (\n//            options.sanityCheck ||\n//            options.logGetSignal ||\n//            options.logSetSignal ||\n//            options.logStartComponent ||\n//            options.logFinishComponent\n//        );\n\n    \n    wc = new WitnessCalculator(instance, sanityCheck);\n    return wc;\n\n    function getMessage() {\n        var message = \"\";\n\tvar c = instance.exports.getMessageChar();\n        while ( c != 0 ) {\n\t    message += String.fromCharCode(c);\n\t    c = instance.exports.getMessageChar();\n\t}\n        return message;\n    }\n\t\n    function printSharedRWMemory () {\n\tconst shared_rw_memory_size = instance.exports.getFieldNumLen32();\n\tconst arr = new Uint32Array(shared_rw_memory_size);\n\tfor (let j=0; j<shared_rw_memory_size; j++) {\n\t    arr[shared_rw_memory_size-1-j] = instance.exports.readSharedRWMemory(j);\n\t}\n\n\t// If we've buffered other content, put a space in between the items\n\tif (msgStr !== \"\") {\n\t\tmsgStr += \" \"\n\t}\n\t// Then append the value to the message we are creating\n\tmsgStr += (fromArray32(arr).toString());\n\t}\n\n};\n\nclass WitnessCalculator {\n    constructor(instance, sanityCheck) {\n        this.instance = instance;\n\n\tthis.version = this.instance.exports.getVersion();\n        this.n32 = this.instance.exports.getFieldNumLen32();\n\n        this.instance.exports.getRawPrime();\n        const arr = new Uint32Array(this.n32);\n        for (let i=0; i<this.n32; i++) {\n            arr[this.n32-1-i] = this.instance.exports.readSharedRWMemory(i);\n        }\n        this.prime = fromArray32(arr);\n\n        this.witnessSize = this.instance.exports.getWitnessSize();\n\n        this.sanityCheck = sanityCheck;\n    }\n    \n    circom_version() {\n\treturn this.instance.exports.getVersion();\n    }\n\n    async _doCalculateWitness(input, sanityCheck) {\n\t//input is assumed to be a map from signals to arrays of bigints\n        this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);\n        const keys = Object.keys(input);\n\tvar input_counter = 0;\n        keys.forEach( (k) => {\n            const h = fnvHash(k);\n            const hMSB = parseInt(h.slice(0,8), 16);\n            const hLSB = parseInt(h.slice(8,16), 16);\n            const fArr = flatArray(input[k]);\n\t    let signalSize = this.instance.exports.getInputSignalSize(hMSB, hLSB);\n\t    if (signalSize < 0){\n\t\tthrow new Error(`Signal ${k} not found\\n`);\n\t    }\n\t    if (fArr.length < signalSize) {\n\t\tthrow new Error(`Not enough values for input signal ${k}\\n`);\n\t    }\n\t    if (fArr.length > signalSize) {\n\t\tthrow new Error(`Too many values for input signal ${k}\\n`);\n\t    }\n            for (let i=0; i<fArr.length; i++) {\n                const arrFr = toArray32(BigInt(fArr[i])%this.prime,this.n32)\n                for (let j=0; j<this.n32; j++) {\n\t\t    this.instance.exports.writeSharedRWMemory(j,arrFr[this.n32-1-j]);\n\t\t}\n\t\ttry {\n                    this.instance.exports.setInputSignal(hMSB, hLSB,i);\n\t\t    input_counter++;\n\t\t} catch (err) {\n\t\t    // console.log(`After adding signal ${i} of ${k}`)\n                    throw new Error(err);\n\t\t}\n            }\n\n        });\n\tif (input_counter < this.instance.exports.getInputSize()) {\n\t    throw new Error(`Not all inputs have been set. Only ${input_counter} out of ${this.instance.exports.getInputSize()}`);\n\t}\n    }\n\n    async calculateWitness(input, sanityCheck) {\n\n        const w = [];\n\n        await this._doCalculateWitness(input, sanityCheck);\n\n        for (let i=0; i<this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n\t    const arr = new Uint32Array(this.n32);\n            for (let j=0; j<this.n32; j++) {\n            arr[this.n32-1-j] = this.instance.exports.readSharedRWMemory(j);\n            }\n            w.push(fromArray32(arr));\n        }\n\n        return w;\n    }\n    \n\n    async calculateBinWitness(input, sanityCheck) {\n\n        const buff32 = new Uint32Array(this.witnessSize*this.n32);\n\tconst buff = new  Uint8Array( buff32.buffer);\n        await this._doCalculateWitness(input, sanityCheck);\n\n        for (let i=0; i<this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n\t    const pos = i*this.n32;\n            for (let j=0; j<this.n32; j++) {\n\t\tbuff32[pos+j] = this.instance.exports.readSharedRWMemory(j);\n            }\n        }\n\n\treturn buff;\n    }\n    \n\n    async calculateWTNSBin(input, sanityCheck) {\n\n        const buff32 = new Uint32Array(this.witnessSize*this.n32+this.n32+11);\n\tconst buff = new  Uint8Array( buff32.buffer);\n        await this._doCalculateWitness(input, sanityCheck);\n  \n\t//\"wtns\"\n\tbuff[0] = \"w\".charCodeAt(0)\n\tbuff[1] = \"t\".charCodeAt(0)\n\tbuff[2] = \"n\".charCodeAt(0)\n\tbuff[3] = \"s\".charCodeAt(0)\n\n\t//version 2\n\tbuff32[1] = 2;\n\n\t//number of sections: 2\n\tbuff32[2] = 2;\n\n\t//id section 1\n\tbuff32[3] = 1;\n\n\tconst n8 = this.n32*4;\n\t//id section 1 length in 64bytes\n\tconst idSection1length = 8 + n8;\n\tconst idSection1lengthHex = idSection1length.toString(16);\n        buff32[4] = parseInt(idSection1lengthHex.slice(0,8), 16);\n        buff32[5] = parseInt(idSection1lengthHex.slice(8,16), 16);\n\n\t//this.n32\n\tbuff32[6] = n8;\n\n\t//prime number\n\tthis.instance.exports.getRawPrime();\n\n\tvar pos = 7;\n        for (let j=0; j<this.n32; j++) {\n\t    buff32[pos+j] = this.instance.exports.readSharedRWMemory(j);\n        }\n\tpos += this.n32;\n\n\t// witness size\n\tbuff32[pos] = this.witnessSize;\n\tpos++;\n\n\t//id section 2\n\tbuff32[pos] = 2;\n\tpos++;\n\n\t// section 2 length\n\tconst idSection2length = n8*this.witnessSize;\n\tconst idSection2lengthHex = idSection2length.toString(16);\n        buff32[pos] = parseInt(idSection2lengthHex.slice(0,8), 16);\n        buff32[pos+1] = parseInt(idSection2lengthHex.slice(8,16), 16);\n\n\tpos += 2;\n        for (let i=0; i<this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n            for (let j=0; j<this.n32; j++) {\n\t\tbuff32[pos+j] = this.instance.exports.readSharedRWMemory(j);\n            }\n\t    pos += this.n32;\n        }\n\n\treturn buff;\n    }\n\n}\n\n\nfunction toArray32(rem,size) {\n    const res = []; //new Uint32Array(size); //has no unshift\n    const radix = BigInt(0x100000000);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    if (size) {\n\tvar i = size - res.length;\n\twhile (i>0) {\n\t    res.unshift(0);\n\t    i--;\n\t}\n    }\n    return res;\n}\n\nfunction fromArray32(arr) { //returns a BigInt\n    var res = BigInt(0);\n    const radix = BigInt(0x100000000);\n    for (let i = 0; i<arr.length; i++) {\n        res = res*radix + BigInt(arr[i]);\n    }\n    return res;\n}\n\nfunction flatArray(a) {\n    var res = [];\n    fillArray(res, a);\n    return res;\n\n    function fillArray(res, a) {\n        if (Array.isArray(a)) {\n            for (let i=0; i<a.length; i++) {\n                fillArray(res, a[i]);\n            }\n        } else {\n            res.push(a);\n        }\n    }\n}\n\nfunction fnvHash(str) {\n    const uint64_max = BigInt(2) ** BigInt(64);\n    let hash = BigInt(\"0xCBF29CE484222325\");\n    for (var i = 0; i < str.length; i++) {\n\thash ^= BigInt(str[i].charCodeAt());\n\thash *= BigInt(0x100000001B3);\n\thash %= uint64_max;\n    }\n    let shash = hash.toString(16);\n    let n = 16 - shash.length;\n    shash = '0'.repeat(n).concat(shash);\n    return shash;\n}\n","import init, * as zerokitRLN from \"@waku/zerokit-rln-wasm\";\n\nimport verificationKey from \"./resources/verification_key.js\";\nimport * as wc from \"./witness_calculator.js\";\n\n/**\n * Concatenate Uint8Arrays\n * @param input\n * @returns concatenation of all Uint8Array received as input\n */\nfunction concatenate(...input: Uint8Array[]): Uint8Array {\n  let totalLength = 0;\n  for (const arr of input) {\n    totalLength += arr.length;\n  }\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const arr of input) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\nconst stringEncoder = new TextEncoder();\n\nconst DEPTH = 20;\n\nasync function loadWitnessCalculator(): Promise<any> {\n  const url = new URL(\"./resources/rln.wasm\", import.meta.url);\n  const response = await fetch(url);\n  return await wc.builder(new Uint8Array(await response.arrayBuffer()), false);\n}\n\nasync function loadZkey(): Promise<Uint8Array> {\n  const url = new URL(\"./resources/rln_final.zkey\", import.meta.url);\n  const response = await fetch(url);\n  return new Uint8Array(await response.arrayBuffer());\n}\n\n/**\n * Create an instance of RLN\n * @returns RLNInstance\n */\nexport async function create(): Promise<RLNInstance> {\n  await init();\n  zerokitRLN.init_panic_hook();\n  const witnessCalculator = await loadWitnessCalculator();\n  const zkey = await loadZkey();\n  const vkey = stringEncoder.encode(JSON.stringify(verificationKey));\n  const zkRLN = zerokitRLN.newRLN(DEPTH, zkey, vkey);\n  return new RLNInstance(zkRLN, witnessCalculator);\n}\n\nexport class MembershipKey {\n  readonly IDKey: Uint8Array;\n  readonly IDCommitment: Uint8Array;\n\n  constructor(memKeys: Uint8Array) {\n    this.IDKey = memKeys.subarray(0, 32);\n    this.IDCommitment = memKeys.subarray(32);\n  }\n}\n\n// Adapted from https://github.com/feross/buffer\n\nfunction checkInt(\n  buf: Uint8Array,\n  value: number,\n  offset: number,\n  ext: number,\n  max: number,\n  min: number\n): void {\n  if (value > max || value < min)\n    throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n}\n\nconst writeUIntLE = function writeUIntLE(\n  buf: Uint8Array,\n  value: number,\n  offset: number,\n  byteLength: number,\n  noAssert?: boolean\n): Uint8Array {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(buf, value, offset, byteLength, maxBytes, 0);\n  }\n\n  let mul = 1;\n  let i = 0;\n  buf[offset] = value & 0xff;\n  while (++i < byteLength && (mul *= 0x100)) {\n    buf[offset + i] = (value / mul) & 0xff;\n  }\n\n  return buf;\n};\n\nconst DefaultEpochUnitSeconds = 10; // the rln-relay epoch length in seconds\n\nexport function toEpoch(\n  timestamp: Date,\n  epochUnitSeconds: number = DefaultEpochUnitSeconds\n): Uint8Array {\n  const unix = Math.floor(timestamp.getTime() / 1000 / epochUnitSeconds);\n  return writeUIntLE(new Uint8Array(32), unix, 0, 8);\n}\n\nconst proofOffset = 128;\nconst rootOffset = proofOffset + 32;\nconst epochOffset = rootOffset + 32;\nconst shareXOffset = epochOffset + 32;\nconst shareYOffset = shareXOffset + 32;\nconst nullifierOffset = shareYOffset + 32;\nconst rlnIdentifierOffset = nullifierOffset + 32;\n\nexport class RateLimitProof {\n  readonly proof: Uint8Array;\n  readonly merkleRoot: Uint8Array;\n  readonly epoch: Uint8Array;\n  readonly shareX: Uint8Array;\n  readonly shareY: Uint8Array;\n  readonly nullifier: Uint8Array;\n  readonly rlnIdentifier: Uint8Array;\n\n  constructor(proofBytes: Uint8Array) {\n    if (proofBytes.length < rlnIdentifierOffset) throw \"invalid proof\";\n    // parse the proof as proof<128> | share_y<32> | nullifier<32> | root<32> | epoch<32> | share_x<32> | rln_identifier<32>\n    this.proof = proofBytes.subarray(0, proofOffset);\n    this.merkleRoot = proofBytes.subarray(proofOffset, rootOffset);\n    this.epoch = proofBytes.subarray(rootOffset, epochOffset);\n    this.shareX = proofBytes.subarray(epochOffset, shareXOffset);\n    this.shareY = proofBytes.subarray(shareXOffset, shareYOffset);\n    this.nullifier = proofBytes.subarray(shareYOffset, nullifierOffset);\n    this.rlnIdentifier = proofBytes.subarray(\n      nullifierOffset,\n      rlnIdentifierOffset\n    );\n  }\n\n  toBytes(): Uint8Array {\n    return concatenate(\n      this.proof,\n      this.merkleRoot,\n      this.epoch,\n      this.shareX,\n      this.shareY,\n      this.nullifier,\n      this.rlnIdentifier\n    );\n  }\n}\n\nexport class RLNInstance {\n  constructor(private zkRLN: number, private witnessCalculator: any) {}\n\n  generateMembershipKey(): MembershipKey {\n    const memKeys = zerokitRLN.generateMembershipKey(this.zkRLN);\n    return new MembershipKey(memKeys);\n  }\n\n  insertMember(idCommitment: Uint8Array): void {\n    zerokitRLN.insertMember(this.zkRLN, idCommitment);\n  }\n\n  serializeMessage(\n    uint8Msg: Uint8Array,\n    memIndex: number,\n    epoch: Uint8Array,\n    idKey: Uint8Array\n  ): Uint8Array {\n    // calculate message length\n    const msgLen = writeUIntLE(new Uint8Array(8), uint8Msg.length, 0, 8);\n\n    // Converting index to LE bytes\n    const memIndexBytes = writeUIntLE(new Uint8Array(8), memIndex, 0, 8);\n\n    // [ id_key<32> | id_index<8> | epoch<32> | signal_len<8> | signal<var> ]\n    return concatenate(idKey, memIndexBytes, epoch, msgLen, uint8Msg);\n  }\n\n  async generateProof(\n    msg: Uint8Array,\n    index: number,\n    epoch: Uint8Array | Date | undefined,\n    idKey: Uint8Array\n  ): Promise<RateLimitProof> {\n    if (epoch == undefined) {\n      epoch = toEpoch(new Date());\n    } else if (epoch instanceof Date) {\n      epoch = toEpoch(epoch);\n    }\n\n    if (epoch.length != 32) throw \"invalid epoch\";\n    if (idKey.length != 32) throw \"invalid id key\";\n    if (index < 0) throw \"index must be >= 0\";\n\n    const serialized_msg = this.serializeMessage(msg, index, epoch, idKey);\n    const rlnWitness = zerokitRLN.getSerializedRLNWitness(\n      this.zkRLN,\n      serialized_msg\n    );\n    const inputs = zerokitRLN.RLNWitnessToJson(this.zkRLN, rlnWitness);\n    const calculatedWitness = await this.witnessCalculator.calculateWitness(\n      inputs,\n      false\n    ); // no sanity check being used in zerokit\n\n    const proofBytes = zerokitRLN.generate_rln_proof_with_witness(\n      this.zkRLN,\n      calculatedWitness,\n      rlnWitness\n    );\n\n    return new RateLimitProof(proofBytes);\n  }\n\n  verifyProof(proof: RateLimitProof | Uint8Array): boolean {\n    if (proof instanceof RateLimitProof) {\n      proof = proof.toBytes();\n    }\n    return zerokitRLN.verifyProof(this.zkRLN, proof);\n  }\n}\n"],"names":["wasm","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","Uint8Array","getUint8Memory0","byteLength","memory","buffer","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","takeObject","ret","dropObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachedInt32Memory0","Int32Array","getInt32Memory0","debugString","val","type","description","name","isArray","debug","i","className","builtInMatches","exec","toString","call","JSON","stringify","_","Error","message","stack","init_panic_hook","newRLN","tree_height","zkey","vk","getSerializedRLNWitness","ctx","input","insertMember","retptr","__wbindgen_add_to_stack_pointer","r0","RLNWitnessToJson","serialized_witness","cachedUint32Memory0","Uint32Array","passArrayJsValueToWasm0","array","generate_rln_proof_with_witness","calculated_witness","ptr0","__wbindgen_malloc","len0","r1","generateMembershipKey","verifyProof","proof","handleError","f","args","apply","this","e","__wbindgen_exn_store","getArrayU8FromWasm0","load","module","imports","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","getImports","wbg","__wbindgen_string_new","arg0","arg1","__wbindgen_object_drop_ref","__wbindgen_is_string","__wbindgen_string_get","x","__wbindgen_realloc","__wbg_BigInt_d0c7d465bfa30d3b","BigInt","__wbindgen_number_new","__wbg_BigInt_1fab4952b6c4a499","asUintN","__wbindgen_object_clone_ref","__wbindgen_is_undefined","__wbindgen_is_object","__wbg_set_c943d600fa71e4dd","arg2","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","error","__wbindgen_free","__wbg_randomFillSync_065afffde01daa66","randomFillSync","arguments","__wbg_getRandomValues_b99eec4244a475bb","getRandomValues","__wbg_process_0cc2ada8524d6f83","process","__wbg_versions_c11acceab27a6c87","versions","__wbg_node_7ff1ce49caf23815","node","__wbg_static_accessor_NODE_MODULE_cf6401cc1091279e","__wbg_require_a746e79b322b9336","require","__wbg_crypto_2036bed7c44c25e7","crypto","__wbg_msCrypto_a21fc88caf1ecdc8","msCrypto","__wbg_new_1d9a920c6bfc44a8","__wbg_newnoargs_b5b063fc6c2f0376","Function","__wbg_new_268f7b7dd3430798","Map","__wbg_call_97ae9d8645dc388b","__wbg_new_0b9bfdd97583284e","Object","__wbg_self_6d479506f72c6a71","self","__wbg_window_f2557cc78490aceb","window","__wbg_globalThis_7f206bda628d5286","globalThis","__wbg_global_ba75c50d1cf384f4","global","__wbg_set_a68214f35c417fa9","__wbg_toString_d9cd5f001405e8ff","__wbg_new_8d2af00bc1e329ee","__wbg_set_933729cf5b66ac11","__wbg_fromEntries_7abdcb92016eb4b9","fromEntries","__wbg_buffer_3f3d764d4747d564","__wbg_newwithbyteoffsetandlength_d9aa266703cb98be","__wbg_new_8c3f0052272a457a","__wbg_set_83db9690f9353e79","__wbg_length_9e1ae1900cb0fbd5","__wbg_newwithlength_f5933855e4f48a19","__wbg_subarray_58ad4efbb5bcb886","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_memory","finalizeInit","exports","init","__wbindgen_wasm_module","URL","Request","fetch","builder","options","getMessage","printSharedRWMemory","shared_rw_memory_size","getFieldNumLen32","arr","j","readSharedRWMemory","msgStr","fromArray32","c","getMessageChar","String","fromCharCode","compile","wasmModule","log","errStr","runtime","exceptionHandler","err","printErrorMessage","writeBufferMessage","msg","showSharedRWMemory","wc","WitnessCalculator","sanityCheck","version","getVersion","n32","getRawPrime","prime","witnessSize","getWitnessSize","keys","input_counter","forEach","k","h","fnvHash","hMSB","parseInt","hLSB","fArr","flatArray","signalSize","getInputSignalSize","arrFr","toArray32","writeSharedRWMemory","setInputSignal","getInputSize","w","_doCalculateWitness","getWitness","buff32","buff","pos","n8","idSection1lengthHex","idSection2length","idSection2lengthHex","rem","size","res","radix","unshift","Number","a","fillArray","str","uint64_max","hash","shash","n","repeat","concat","concatenate","totalLength","result","stringEncoder","loadWitnessCalculator","url","response","loadZkey","create","zerokitRLN","witnessCalculator","vkey","verificationKey","zkRLN","RLNInstance","MembershipKey","memKeys","IDKey","IDCommitment","writeUIntLE","value","noAssert","ext","max","min","RangeError","checkInt","Math","pow","mul","toEpoch","timestamp","epochUnitSeconds","unix","floor","getTime","RateLimitProof","proofBytes","nullifierOffset","merkleRoot","proofOffset","epoch","rootOffset","shareX","epochOffset","shareY","shareXOffset","nullifier","shareYOffset","rlnIdentifier","idCommitment","uint8Msg","memIndex","idKey","msgLen","index","Date","serialized_msg","serializeMessage","rlnWitness","inputs","calculateWitness","calculatedWitness","toBytes"],"sourceRoot":""}